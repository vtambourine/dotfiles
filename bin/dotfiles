#!/usr/bin/env bash

set -e

DOTFILES_DIRECTORY="${HOME}/dotfiles"
DOTFILES_GIT_REMOTE="https://github.com/vtambourine/dotfiles.git"
DOTFILES_GIT_BRANCH="master"
DOTFILES_BOOTSTRAP="${DOTFILES_GIT_REMOTE%.git}/raw/${DOTFILES_GIT_BRANCH}/bin/`basename $0`"
DOTFILES_TARBALL_PATH="${DOTFILES_GIT_REMOTE%.git}/archive/${DOTFILES_GIT_BRANCH}.tar.gz"

# Processing options
while : ; do
    case "$1" in
        -i | --identity) # Identity file to use in ssh connection
            identity=$2
            shift;shift;;
        -n | --name) # Git author name
            name=$2
            shift;shift;;
        -m | --email) # Git author email
            email=$2
            shift;shift;;
        -* | --*)
            printf "$(tput setaf 136)! Warning: Unknown option: $1$(tput sgr0)\n" >&2
            exit 1;;
        *)
            break;;
    esac
done

# Deploy dotfiles on the remote host if one is provided
if [ $# -gt 0 ]; then
    while [ $1 ]; do
        printf "$(tput setaf 7)Deploying dotfiles on $1...$(tput sgr0)\n"
        ssh ${identity:+"-i $identity"} $1 -- "curl -kfsSL $DOTFILES_BOOTSTRAP \$1 | bash -s -- ${name:+"--name \"$name\""} ${email:+"--email \"$email\""}"
        shift
    done
    exit 0
fi

# If missing, download and extract dotfiles repository
if [[ ! -d ${DOTFILES_DIRECTORY} ]]; then
    printf "$(tput setaf 7)Downloading dotfiles...$(tput sgr0)\n"
    mkdir ${DOTFILES_DIRECTORY}
    # Get the tarball
    curl -fsSLo ${HOME}/dotfiles.tar.gz ${DOTFILES_TARBALL_PATH} || true
    # Extract to the dotfiles directory
    tar -zxf ${HOME}/dotfiles.tar.gz --strip-components 1 -C ${DOTFILES_DIRECTORY}
    # Remove the tarball
    rm -rf ${HOME}/dotfiles.tar.gz
fi

cd ${DOTFILES_DIRECTORY}

source ./lib/utils.sh

# Initialize the git repository if it's missing
if ! is_git_repo; then
    printf "••• Initializing git repository...\n"
    git init
    git remote add origin ${DOTFILES_GIT_REMOTE}
    git fetch origin ${DOTFILES_GIT_BRANCH}
    # Reset the index and working tree to the fetched HEAD
    # (submodules are cloned in the subsequent sync step)
    git reset --hard FETCH_HEAD
    # Remove any untracked files
    #git clean -fd
# Update git repository if it's clean
elif is_clean_repo; then
    printf "••• Syncing dotfiles...\n"
    # Pull down the latest changes
    git pull --rebase origin master
    # Update submodules
    git submodule update --recursive --init --quiet
# Prevent local changes from being deleted
else
    printf "××× Git repository has uncommited changes.\n"
    printf "××× Please, commit or stash them before continue.\n"
    #exit 1
fi

link() {
    # Force create/replace the symlink.
    ln -fs "${DOTFILES_DIRECTORY}/${1}" "${HOME}/${2}"
}

mirrorfiles() {
    # Copy `.gitconfig`.
    # Any global git commands in `~/.bash_profile.local` will be written to
    # `.gitconfig`. This prevents them being committed to the repository.
    rsync -avz --quiet ${DOTFILES_DIRECTORY}/git/gitconfig  ${HOME}/.gitconfig

	# Setup Git credentials if provided
    GIT_CREDENTIALS="${HOME}/.git_credentials.local"
    if [[ $name ]]; then echo "git config --global user.name \"$name\"" > $GIT_CREDENTIALS; fi
    if [[ $email ]]; then echo "git config --global user.email \"$email\"" >> $GIT_CREDENTIALS; fi

    # Force remove the vim directory if it's already there.
    if [ -e "${HOME}/.vim" ]; then
        rm -rf "${HOME}/.vim"
    fi

    # Create the necessary symbolic links between the `.dotfiles` and `HOME`
    # directory. The `bash_profile` sources other files directly from the
    # `.dotfiles` repository.
    link "bash/bashrc"        ".bashrc"
    link "bash/profile"       ".bash_profile"
    link "bash/inputrc"       ".inputrc"
    link "vim"                ".vim"
    link "vim/vimrc"          ".vimrc"
    link "git/gitattributes"  ".gitattributes"
    link "git/gitignore"      ".gitignore"

    printf "••• Dotfiles update complete!\n"
}

mirrorfiles
