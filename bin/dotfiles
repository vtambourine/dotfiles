#!/usr/bin/env bash

set -e

DOTFILES_DIRECTORY="${HOME}/dotfiles2"
DOTFILES_GIT_REMOTE="https://github.com/vtambourine/dotfiles.git"
DOTFILES_GIT_BRANCH="blank"
DOTFILES_BOOTSTRAP="${DOTFILES_GIT_REMOTE%.git}/raw/${DOTFILES_GIT_BRANCH}/bin/`basename $0`"
DOTFILES_TARBALL_PATH="${DOTFILES_GIT_REMOTE%.git}/archive/${DOTFILES_GIT_BRANCH}.tar.gz"

# Deploy dotfiles on the remote host if one is provided
if [ $# -gt 0 ]; then
    while [ $1 ]; do
        ssh $1 -- "curl -kfsSL $DOTFILES_BOOTSTRAP \$1 | bash -s"
        shift
    done
    exit 0
fi

# If missing, download ad extract dotfiles repository
if [[ ! -d ${DOTFILES_DIRECTORY} ]]; then
    printf "Downloading dotfiles...\n"
    mkdir ${DOTFILES_DIRECTORY}
    # Get the tarball
    curl -fsSLo ${HOME}/dotfiles.tar.gz ${DOTFILES_TARBALL_PATH} || true
    # Extract to the dotfiles directory
    tar -zxf ${HOME}/dotfiles.tar.gz --strip-components 1 -C ${DOTFILES_DIRECTORY}
    # Remove the tarball
    rm -rf ${HOME}/dotfiles.tar.gz
fi

cd ${DOTFILES_DIRECTORY}

source ./lib/utils.sh

# Initialize the git repository if it's missing
if ! is_git_repo; then
    printf "Initializing git repository...\n"
    git init
    git remote add origin ${DOTFILES_GIT_REMOTE}
    git fetch origin ${DOTFILES_GIT_BRANCH}
    # Reset the index and working tree to the fetched HEAD
    # (submodules are cloned in the subsequent sync step)
    git reset --hard FETCH_HEAD
fi

# Update git repository if it's clean
if is_clean_repo; then
    git fetch origin ${DOTFILES_GIT_BRANCH}
    # Reset the index and working tree to the fetched HEAD
    # (submodules are cloned in the subsequent sync step)
    git reset --hard FETCH_HEAD
    # Remove any untracked files
    #git clean -fd
else
    printf "Git repository has uncommited changes.\n"
    printf "Please, commit or stash them before continue.\n"
    exit 1
fi